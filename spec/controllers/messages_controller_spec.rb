require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe MessagesController, :type => :controller do
  render_views

  describe "access control" do

    it "should deny access to 'create'" do
      post :create
      response.should redirect_to(signin_path)
    end
# # TODO no Couldn't find Message wit 'id'=1
#     it "should deny access to 'destroy'" do
#       delete :destroy, :id => 1
#       response.should redirect_to(signin_path)
#     end
  end

  describe "GET 'index'" do

    describe "for non-signed-in users" do 
      it "should deny access" do
        get :index
        expect(response).to redirect_to(signin_path)
        expect(flash[:notice]).to match(/Please Sign in/i)
      end
    end

    describe "for signed-in users" do

      before(:each) do
        @user = test_sign_in(Factory(:user))
      end

      it "should be successful" do
        get :index
        expect(response).to be_success
      end

      it "should have the right title" do
        get :index
        expect(response.body).to have_title("All Messages consumed by Panda")
      end
    end
  end

  describe "validations" do

    before(:each) do
      @user = Factory(:user)
      @attr = { :message => "Hi test 1.", :to => 6133042666.0, :from => 6138584587 }
    end

    it "should create a new instance given valid attributes" do
      @user.messages.create!(@attr)
    end

    describe "user associations" do

      before(:each) do
        @message = @user.messages.create(@attr) 
      end

      it "should have a user attribute" do
        @message.should respond_to(:user)
      end

      it "should have the right associated user" do
        @message.user_id.should == @user.id
        @message.user.should == @user
      end
    end

    describe "for an unauthorized user" do 

      before(:each) do
        wrong_user = Factory(:user, :email => Factory.next(:email), :phone => Factory.next(:phone) )
        test_sign_in(wrong_user)
        @message = Factory(:message, :user => @user)
      end

      it "should deny access" do 
          get :show, :id => @message
        response.should redirect_to(root_path)
      end

      it "should not render the content of the other user's message" do 
        get :show, :id => @message
        response.should_not render_template('messages/show')
      end
    end
  end


  # describe ".sms_create" do 
  #   it "should create a message" do
  #     message = MessagesController.new
  #     message.sms_create("Eyo", 6133042365.0)
  #     expect(message.sms_create).to match(/SMS in I-dont-know-lol/)
  #   end
  # end

  describe "POST 'create'" do

    before(:each) do
      @user = test_sign_in(Factory(:user))
    end

    describe "failure with content" do

      before(:each) do 
        @attr = { :content => "" }
      end

      it "should not create a message" do
        lambda do
          post :create, :message => @attr 
        end.should_not change(Message, :count)
      end

      it "should render the home page" do
        post :create, :message => @attr
        response.should render_template('pages/home')
      end
    end

    describe "failure with phone" do

      before(:each) do 
        @attr = { :phone => "" }
      end

      it "should not create a message" do
        lambda do
          post :create, :message => @attr 
        end.should_not change(Message, :count)
      end

      it "should render the home page" do
        post :create, :message => @attr
        response.should render_template('pages/home')
      end
    end

    describe "success" do

      before(:each) do
        @attr = { :message => "Lorem ipsum messages controller test", :to => 6133045566.0, :from => 6138584587  }
      end

      it "should create a message" do 

        lambda do
          post :create, :message => @attr
        end.should change(Message, :count).by(1)
      end

      it "should redirect to the home page" do
        post :create, :message => @attr 
        response.should redirect_to(root_path)
      end

      it "should have a flash message" do
        post :create, :message => @attr
        flash[:success].should match(/message created/i)
      end
    end
  end

  describe "DELETE 'destroy'" do

    describe "for an unauthorized user" do 

      before(:each) do
        @user = Factory(:user)
        wrong_user = Factory(:user, :email => Factory.next(:email), :phone => Factory.next(:phone))
        test_sign_in(wrong_user)
        @message = Factory(:message, :user => @user)
      end

      it "should deny access" do 
        delete :destroy, :id => @message
        response.should redirect_to(root_path)
      end

    end

    describe "for an authorized user" do

      before(:each) do
        @user = test_sign_in(Factory(:user))
        @message = Factory(:message, :user => @user)
      end

      it "should destroy the micripost" do
        lambda do
          delete :destroy, :id => @message
        end.should change(Message, :count).by(-1)
      end
    end
  end
end
